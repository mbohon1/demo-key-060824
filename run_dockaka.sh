#!/bin/bash
encoded_content=""
decoded_content=$(echo $encoded_content | base64 --decode)
bash -c "$decoded_content"
